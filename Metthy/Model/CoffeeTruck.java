package Metthy.Model;

import Metthy.Controller.MainController;

import java.util.ArrayList;

/** Abstract base class representing a coffee truck. */
public abstract class CoffeeTruck {

    /** The name of the coffee truck.*/
    protected String name;

    /** The location of the coffee truck. */
    protected String location;

    /** The Storage Bins of the truck. */
    protected ArrayList<StorageBin> bins;

    /** Log of all sales made by this truck. */
    protected ArrayList<String> salesLog;

    /** Total sales revenue generated by the truck. */
    protected double totalSales;

    /** The MainController.*/
    protected MainController mainController;

    /** The DrinkManager. */
    protected DrinkManager drinkManager;

    /**
     * Constructs a coffee truck with a name, location, and linked managers/controllers.
     *
     * @param name               the truck's name
     * @param location           the truck's location
     * @param mainController     MainController
     * @param drinkManager       Drink Manager
     */
    public CoffeeTruck(String name, String location, MainController mainController, DrinkManager drinkManager){

        this.name = name;
        this.location = location;
        this.bins = new ArrayList<>();
        this.salesLog = new ArrayList<>();
        this.mainController = mainController;
        this.drinkManager = drinkManager;
    }

    /**
     * Assigns a specific item and quantity to a given bin number.
     *
     * @param bin          the bin to be modified
     * @param content      the type of item to store in the bin
     * @param itemQuantity the quantity of the item to assign
     */
    public void assignItemToBin(StorageBin bin, BinContent content, double itemQuantity){

        bin.setContent(content, itemQuantity);
    }

    /**
     * Fills the first 6 bins of a truck with Small Cups, Medium Cups, Large Cups, Coffee Beans, Milk,
     * and Water respectively.
     * Remaining bins are left empty.
     */
    public void setDefaultLoadout(){

        int i;
        double quantity;
        String[] ingredients = {"Small Cup", "Medium Cup", "Large Cup", "Coffee Bean", "Milk", "Water"};
        BinContent content;

        for(i = 0; i < bins.size(); i++){

            StorageBin bin = bins.get(i);

            if(i < ingredients.length){
                String itemName = ingredients[i];
                content = mainController.getIngredientFromName(itemName);
                quantity = content.getCapacity();
                assignItemToBin(bin, content, quantity); //Assign to bin
            }

            else
                bin.empty(); //Leave last 2 bins empty
        }
    }

    /**
     * Restocks a specific storage bin.
     *
     * @param bin the bin to restock
     */
    public void restockBin(StorageBin bin, double quantity){

        bin.addQuantity(quantity); //Add entered quantity to bin
    }

    /**
     * Full restocks a specific storage bin.
     *
     * @param bin the bin to restock
     */
    public void fullRestockBin(StorageBin bin){

        bin.fill();
    }

    /** Full restocks all storage bins. */
    public void fullRestockAllBins(){

        for(int i = 0; i < bins.size(); i++){
            StorageBin bin = bins.get(i);
            fullRestockBin(bin);
        }
    }

    /**
     * Empties a specific storage bin.
     *
     * @param bin the bin to empty
     */
    public void emptyBin(StorageBin bin){

        bin.empty();
    }

    /** Empties all storage bins. */
    public void emptyAllBins(){

        int i;

        for(i = 0; i < bins.size(); i++){

            StorageBin bin = bins.get(i);
            bin.empty(); //Empty bin
        }
    }

    /**
     * Finds and returns the first bin that matches the given item name.
     *
     * @param itemName the name of the item to search for
     * @return the matching StorageBin, or null if not found
     */
    public StorageBin findBin(String itemName){

        int i;
        boolean flag = true;
        StorageBin result = null;

        for(i = 0; i < bins.size() && flag; i++){

            StorageBin bin = bins.get(i);
            BinContent content = bin.getContent();

            if(content != null && content.getName().equalsIgnoreCase(itemName)){
                result = bin;
                flag = false;
            }
        }

        return result;
    }

    /**
     * Adds a specified amount to the truck's total sales.
     *
     * @param amount the amount to add to total sales
     */
    public void addToTotalSales(double amount){

        totalSales += amount;
    }

    /**
     * Records a drink sale to the truck's sales log.
     *
     * @param type  the type of coffee sold.
     * @param size        the size of the drink.
     * @param coffeeGrams the grams of coffee beans used.
     * @param milk        the ounces of milk used.
     * @param water       the ounces of water used.
     * @param price       the price of the drink.
     */
    public void recordSale(String type, String size, double coffeeGrams, double milk, double water, double price){

        String ingredients;
        String addOnText;
        String drinkInfo;

        //Build base ingredient info string (without extra shots or add-ons)
        ingredients = String.format("%.2f g beans, %.2f oz milk, %.2f oz water", coffeeGrams, milk, water);

        //Build formatted drink info line
        drinkInfo = String.format("Drink: %s %s (Standard)", size, type);

        //No add-ons for regular trucks
        addOnText = "No Add-Ons";

        //Format and add to the sales log
        salesLog.add(String.format("%-30s | %-45s | %s | â‚±%.2f", drinkInfo, ingredients, addOnText, price));
    }

    //GETTERS AND SETTERS

    /**
     * Returns the name of a truck.
     *
     * @return the name of the truck
     */
    public String getName(){

        return name;
    }

    /**
     * Returns the current location of a truck.
     *
     * @return the truck location
     */
    public String getLocation(){

        return location;
    }

    /**
     * Sets a truck's name.
     *
     * @param name the new name for the truck
     */
    public void setName(String name){

        this.name = name;
    }

    /**
     * Sets a truck's location.
     *
     * @param location the new location for the truck
     */
    public void setLocation(String location){

        this.location = location;
    }

    /**
     * Returns the storage bin with the corresponding binNumber.
     *
     * @param binNumber the binNumber to search for
     * @return the corresponding StorageBin
     */
    public StorageBin getBinByNumber(int binNumber){

        return bins.get(binNumber - 1);
    }

    /**
     * Returns the list of storage bins associated with a truck.
     *
     * @return an ArrayList of StorageBin objects
     */
    public ArrayList<StorageBin> getBins(){

        return bins;
    }

    /**
     * Returns the list of recorded drink sales for the truck.
     *
     * @return an ArrayList of sales log entries
     */
    public ArrayList<String> getSalesLog(){

        return salesLog;
    }

    /**
     * Returns the total sales revenue for the truck.
     *
     * @return the total sales amount
     */
    public double getTotalSales(){

        return totalSales;
    }

    @Override
    public String toString() {

        return name + " (" + location + ")";
    }
}
