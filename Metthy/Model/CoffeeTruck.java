package Metthy.Model;

import Metthy.StorageBin;

import java.util.ArrayList;
import java.util.Scanner;

public abstract class CoffeeTruck {

    /**
     * The name of the coffee truck.
     */
    protected String name;
    /**
     * The current location of the coffee truck.
     */
    protected String location;
    protected ArrayList<StorageBin> bins;
    /**
     * Log of all sales made by this truck.
     */
    protected final ArrayList<String> salesLog;
    /**
     * Total sales revenue generated by the truck.
     */
    protected double totalSales;
    /**
     * Scanner object for reading user input from the console.
     */
    protected final Scanner scanner = new Scanner(System.in);

    protected TruckManager truckManager;

    public CoffeeTruck(String name, String location, TruckManager truckManager){

        this.name = name;
        this.location = location;
        this.truckManager = truckManager;
        this.bins = new ArrayList<>();
        this.salesLog = new ArrayList<>();
    }

    /**
     * Assigns a specific item and quantity to a given bin number.
     *
     * @param bin          the bin to be modified
     * @param content      the type of item to store in the bin
     * @param itemQuantity the quantity of the item to assign
     */
    public void assignItemToBin(StorageBin bin, BinContent content, double itemQuantity){

        bin.setContent(content, itemQuantity);
    }

    /**
     * Fills the first 6 bins of a truck with Small Cups, Medium Cups, Large Cups, Coffee Beans, Milk,
     * and Water respectively.
     * Remaining bins are left empty.
     */
    public void setDefaultLoadout(){

        int i;
        double quantity;
        String[] ingredients = {"Small Cup", "Medium Cup", "Large Cup", "Coffee Bean", "Milk", "Water"};
        BinContent content;

        for(i = 0; i < bins.size(); i++){

            StorageBin bin = bins.get(i);

            if(i < ingredients.length){
                String itemName = ingredients[i];
                content = truckManager.getIngredientFromName(itemName);
                quantity = content.getCapacity();
                assignItemToBin(bin, content, quantity); //Assign to bin
            }

            else
                bin.empty(); //Leave last 2 bins empty
        }
    }

    /**
     * Restocks a specific storage bin.
     *
     * @param binNumber the bin number to restock
     */
    public void restockBin(int binNumber){

        double quantity;

        if(binNumber >= 1 && binNumber <= bins.size()){

            StorageBin bin = bins.get(binNumber - 1);
            if(bin.getItemType() == null)
                System.out.println("Bin isn't assigned any item, restock failed");

            else{

                System.out.println("Enter quantity to restock (0 for full restock): ");
                quantity = scanner.nextDouble();

                //Check if bin already full
                if(quantity == 0 && !bins.get(binNumber - 1).isFull()){

                    bins.get(binNumber - 1).fill(); //Fill bin to max capacity
                    System.out.printf("Bin %d restocked to max capacity\n", binNumber);
                }

                else
                    bin.addQuantity(quantity); //Add entered quantity to bin
            }
        }

        else
            System.out.println("Invalid bin number.");
    }

    /**
     * Restocks all bins that have an assigned item.
     *
     */
    public void restockAllBins(){

        int i;
        int flag = 0;

        for(i = 0; i < bins.size() && flag == 0; i++){

            StorageBin bin = bins.get(i);

            if(bin.getItemType() == null)
                flag = 1;
        }

        if(flag == 1)
            System.out.println("Error Restocking. Some bins have no items assigned");

        else{
            System.out.println("Fully restock bins? (yes/no): ");
            String fullRestock = scanner.nextLine();

            if(fullRestock.equalsIgnoreCase("yes")){

                for(i = 0; i < bins.size(); i++){

                    StorageBin bin = bins.get(i);
                    bin.fill();
                }
            }

            else{
                for(i = 0; i < bins.size(); i++){

                    StorageBin bin = bins.get(i);

                    restockBin(bin.getBinNumber()); //Restock bin
                }
            }
        }
    }

    /**
     * Empties a specific storage bin.
     *
     * @param binNumber the bin number to empty (1-based index)
     */
    public void emptyBin(int binNumber){

        if(binNumber >= 1 && binNumber <= bins.size()){

            //Check if bin is already empty
            if(bins.get(binNumber - 1).isEmpty()){
                bins.get(binNumber - 1).empty();
                System.out.println("Bin #" + binNumber + " emptied.");
            }
        }

        else
            System.out.println("Invalid bin number.");
    }

    /**
     * Empties all storage bins.
     */
    public void emptyAllBins(){

        int i;

        for(i = 0; i < bins.size(); i++){

            StorageBin bin = bins.get(i);
            bin.empty(); //Empty bin
        }
        System.out.println("All bins emptied");
    }

    /**
     * Finds and returns the first bin that matches the given item name.
     *
     * @param itemName the name of the item to search for
     * @return the matching StorageBin, or null if not found
     */
    public StorageBin findBin(String itemName){

        int i;
        StorageBin result = null;

        bins = getBins();
        String item;

        for(i = 0; i < bins.size(); i++){

            StorageBin bin = bins.get(i);
            item = bin.getItemType();

            if(item != null && item.equalsIgnoreCase(itemName))
                result = bin;
        }

        return result;
    }

    /**
     * Adds a specified amount to the truck's total sales.
     *
     * @param amount the amount to add to total sales
     */
    protected void addToTotalSales(double amount){

        totalSales += amount;
    }

    /**
     * Records a drink sale to the truck's sales log.
     *
     * @param coffeeType  the type of coffee sold.
     * @param size        the size of the drink.
     * @param coffeeGrams the grams of coffee beans used.
     * @param milk        the ounces of milk used.
     * @param water       the ounces of water used.
     * @param price       the price of the drink.
     */
    private void recordSale(String coffeeType, String size, double coffeeGrams, double milk, double water, double price){

        String ingredients;
        String addOnText;
        String drinkInfo;

        //Build base ingredient info string (without extra shots or add-ons)
        ingredients = String.format("%.2f g beans, %.2f oz milk, %.2f oz water", coffeeGrams, milk, water);

        //Build formatted drink info line
        drinkInfo = String.format("Drink: %s %s (Standard)", coffeeType, size);

        //No add-ons for regular trucks
        addOnText = "No Add-Ons";

        //Format and add to the sales log
        salesLog.add(String.format("%-30s | %-45s | %s | $%.2f", drinkInfo, ingredients, addOnText, price));
    }

    /**
     * Handles the process of preparing a drink.
     *
     */
    /*protected void prepareDrink(){

        String coffeeType, coffeeSize, brewType;
        double espressoGrams, milkOz, waterOz, price, ratio;
        double[] ingredients;

        System.out.println("\n--- Prepare Coffee Drink ---");
        coffeeType = drinkManager.selectDrinkType();
        coffeeSize = drinkManager.selectDrinkSize();
        brewType = "Standard";
        ratio = drinkManager.getBrewRatio(brewType);

        if(coffeeType == null || coffeeSize == null)
            System.out.println("Invalid input! Drink preparation cancelled");

        else{

            Drink drink = drinkManager.getDrink(coffeeType, coffeeSize);
            drink.setBrewType(brewType); //All drinks in regular truck are standard brew by default

            ingredients = drinkManager.getAdjustedIngredients(coffeeType, coffeeSize, ratio); //Get the ingredients needed for the drink

            drinkManager.showIngredients(coffeeType, coffeeSize, brewType, ingredients); //Show required ingredients

            StorageBin beanBin = findBin("Coffee Beans"); //Find bin with coffee beans
            StorageBin milkBin = findBin("Milk"); //Find bin with milk
            StorageBin waterBin = findBin("Water"); //Find bin with water
            StorageBin cupBin = findBin(coffeeSize + " Cup"); //Find bin with specified cup size
            StorageBin[] bins = { beanBin, milkBin, waterBin, cupBin };

            //Check if storage bins have sufficient ingredients
            if(drinkManager.hasSufficientIngredients(bins, ingredients)){

                espressoGrams = ingredients[0];
                milkOz = ingredients[1];
                waterOz = ingredients[2];
                price = drink.getPrice();

                //Deduct ingredients from storage bins
                drinkManager.useIngredients(bins, ingredients);

                System.out.printf("\n>>> Preparing %s Cup...\n", coffeeSize);
                System.out.printf(">>> Brewing %s Espresso - %.2f grams of coffee...\n", brewType, espressoGrams);

                if(milkOz > 0)
                    System.out.println(">>> Adding Milk...");

                if(coffeeType.equalsIgnoreCase("Americano"))
                    System.out.println(">>> Adding Water...");

                System.out.printf(">>> %s Done!\n", coffeeType);

                System.out.printf("Total Price: $%.2f\n", price);

                addToTotalSales(price); //Update total sales
                recordSale(coffeeType, coffeeSize, espressoGrams, milkOz, waterOz, price); //Update sales log
            }

            else
                System.out.println("Not enough ingredients or cups. Drink preparation cancelled.");
        }
    }
*/

    //GETTERS AND SETTERS

    /**
     * Returns the name of a truck.
     *
     * @return the name of the truck
     */
    public String getName(){

        return name;
    }

    /**
     * Returns the current location of a truck.
     *
     * @return the truck location
     */
    public String getLocation(){

        return location;
    }

    /**
     * Sets a truck's name.
     *
     * @param name the new name for the truck
     */
    public void setName(String name){

        this.name = name;
    }

    /**
     * Sets a truck's location.
     *
     * @param location the new location for the truck
     */
    public void setLocation(String location){

        this.location = location;
    }

    /**
     * Returns the list of storage bins associated with a truck.
     *
     * @return an ArrayList of StorageBin objects
     */
    public ArrayList<StorageBin> getBins(){

        return bins;
    }

    /**
     * Returns the list of recorded drink sales for the truck.
     *
     * @return an ArrayList of sales log entries
     */
    public ArrayList<String> getSalesLog(){

        return salesLog;
    }

    /**
     * Returns the total sales revenue for the truck.
     *
     * @return the total sales amount
     */
    public double getTotalSales(){

        return totalSales;
    }




}
